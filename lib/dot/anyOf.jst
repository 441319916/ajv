{{# def.definitions }}
{{# def.errors }}
{{# def.setupKeyword }}
{{# def.setupNextLevel }}

{{
  var $shortCircuit = it.opts.shortCircuit === undefined ? $breakOnError : it.opts.shortCircuit
    , $noEmptySchema = $schema.every($nonEmptySchema)
    , $someNonEmptySchemas = $noEmptySchema || $schema.some($nonEmptySchema);

  function $nonEmptySchema($sch) {
    return {{# def.nonEmptySchema:$sch }};
  }
}}
{{? $shortCircuit ? $noEmptySchema : $someNonEmptySchemas }}
  {{ var $currentBaseId = $it.baseId; }}
  var {{=$errs}} = errors;
  var {{=$valid}} = {{= !$noEmptySchema }};

  {{# def.setCompositeRule }}

  {{~ $schema:$sch:$i }}
    {{? $shortCircuit || {{# def.nonEmptySchema:$sch }} }}
      {{
        $it.schema = $sch;
        $it.schemaPath = $schemaPath + '[' + $i + ']';
        $it.errSchemaPath = $errSchemaPath + '/' + $i;
      }}

      {{# def.insertSubschemaCode }}

      {{=$valid}} = {{=$valid}} || {{=$nextValid}};

      if (!{{=$valid}}) {
      {{ $closingBraces += '}'; }}
    {{?}}
  {{~}}

  {{# def.resetCompositeRule }}

  {{= $closingBraces }}

  if (!{{=$valid}}) {
    {{# def.extraError:'anyOf' }}
  } else {
    {{# def.resetErrors }}
  {{? it.opts.allErrors }} } {{?}}

  {{# def.cleanUp }}
{{??}}
  {{? $breakOnError }}
    if (true) {
  {{?}}
{{?}}
